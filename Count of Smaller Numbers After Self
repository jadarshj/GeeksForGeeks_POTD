(GFG) : Count Smaller elements || (LeetCode) : Count of Smaller Numbers After Self 
Problem Statement : Given an array arr containing positive integers. Count and return an array ans where ans[i] denotes the number of smaller elements on right side of arr[i].

Examples:
------------------------------------------------------------
Input: arr[] = {12, 1, 2, 3, 0, 11, 4}
Output: 6 1 1 1 0 1 0

Explanation: There are 6 smaller elements right
after 12. There is 1 smaller element right after
1. And so on.
------------------------------------------------------------

Input: arr[] = {1, 2, 3, 4, 5}
Output: 0 0 0 0 0

Explanation: There are 0 smaller elements right
after 1. There are 0 smaller elements right after
2. And so on.
------------------------------------------------------------

Expected Time Complexity: O(n*logn)
Expected Auxiliary Space: O(n)

Constraints:
1 ≤ arr.size() ≤ 106
0 ≤ arr[i]  ≤ 108



Explaination : 
Follow the steps below to solve the problem:

Declare an array of pair of int V and an array ans to keep track of count. 
Traverse the given array and insert all the elements and their corresponding index as a pair in this new array.
We will call our merge sort function on this array. 
In the merge function, we declare two pointers i and j as usual to traverse our left and right array and merge them in descending order.
Now, as we traverse these two arrays, We know that all the elements that are present in right array are also on
the right side (in the actual array) of the elements that are present in left array.
So, whenever we find a element in left array which is greater than the element in the right array( V[i].first > V[j].first )
we increase our count ans[ V[i].second ] += size of right array – j +1. 
Because our arrays are in decreasing order that means all the elements next to it are also smaller than V[i].first.
After increasing the count we just simply do our sorting in decreasing and move our pointers ahead.


Code:
  void merge(int l ,int mid ,int r, vector<pair<int,int>>&ds,vector<int>&ans){
      int i = l;
      int j = mid+1;
      vector<pair<int,int>>temp;
      
      while(i<mid+1 && j<=r){
        if(ds[i].first > ds[j].first){
            ans[ds[i].second]+=(r-j+1);
            temp.push_back(ds[i]);
            ++i;
        }
        else{
            temp.push_back(ds[j]);
            ++j;
        }
      }
      while(i<=mid){
            temp.push_back(ds[i]);
            ++i;
      }
      while(j<=r){
            temp.push_back(ds[j]);
            ++j;
      }
      
      for(int k = 0 ; k < temp.size(); ++k){
          ds[l+k] = temp[k];
      }
  }
  void mergeSort(int l,int r,vector<pair<int,int>>&ds,vector<int>&ans){
      if(l<r){
          int mid = l + (r-l)/2;
          mergeSort(l,mid,ds,ans);
          mergeSort(mid+1,r,ds,ans);
          merge(l,mid,r,ds,ans);
      }
  }
    vector<int> constructLowerArray(vector<int> &arr) {
        // code here
        vector<pair<int,int>>ds;
        int n = arr.size();
        
        for(int i = 0 ; i < n ; ++i){
            ds.push_back({arr[i],i});
        }
        
        vector<int>ans(n,0);
        
        mergeSort(0,n-1,ds,ans);
        
        return ans;
    }
